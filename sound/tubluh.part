instr tubluh

iFraction random .1, .9
p1 += iFraction

print p1

iFrequency init cpsmidinn ( p5 )

iDistance init p6 + 1

iAttack init p7 * p3
iDecay init p8 * p3
iSustain init p9
iRelease init p3 - iAttack - iDecay

aAmplitude linseg 0, iAttack, 1 / iDistance, iDecay, iSustain / iDistance, iRelease, 0

iSweep init p10
iShift init p11

aFrequency linseg iFrequency * iSweep, iAttack * iShift, iFrequency

aNote poscil aAmplitude, aFrequency

shmix aNote

aSnatch noise 1, -0

aSnatch butterlp aSnatch, aFrequency*2

aAmplitude linseg 0, iAttack / 8, 1, iDecay, 0

aSnatch *= aAmplitude/iDistance

shmix aSnatch/8

endin

/*
chnset 1/16, "tak/attack"
chnset 1/4, "tak/decay"
chnset 1/4, "tak/sustain"
chnset 2^8, "tak/sweep"
chnset 1/512, "tak/shift"

iIndex init 1
iLength init 3

while iIndex <= iLength do

SAttack sprintf "suggat%d/attack", iIndex
chnset 1/256, SAttack

SDecay sprintf "suggat%d/decay", iIndex
chnset 1/2, SDecay

SSustain sprintf "suggat%d/sustain", iIndex
chnset 1/4, SSustain

SSweep sprintf "suggat%d/sweep", iIndex
chnset 2^4, SSweep

SShift sprintf "suggat%d/shift", iIndex
chnset 1, SShift

iIndex += 1

od
*/
